///
/// @Generated by Mockolo
///

import AVKit
import ComposableArchitecture
import CoreLocation
import Dispatch
@testable import Fosdem
import Foundation
import GRDB
import MapKit
import SafariServices
import UIKit
#if DEBUG
import UIKit
#endif

final class AVAudioSessionProtocolMock: AVAudioSessionProtocol {
  init() {}

  private(set) var setCategoryCallCount = 0
  var setCategoryArgValues = [AVAudioSession.Category]()
  var setCategoryHandler: ((AVAudioSession.Category) throws -> Void)?
  func setCategory(_ category: AVAudioSession.Category) throws {
    setCategoryCallCount += 1
    setCategoryArgValues.append(category)
    if let setCategoryHandler = setCategoryHandler {
      try setCategoryHandler(category)
    }
  }

  private(set) var setActiveCallCount = 0
  var setActiveArgValues = [(Bool, AVAudioSession.SetActiveOptions)]()
  var setActiveHandler: ((Bool, AVAudioSession.SetActiveOptions) throws -> Void)?
  func setActive(_ active: Bool, options: AVAudioSession.SetActiveOptions) throws {
    setActiveCallCount += 1
    setActiveArgValues.append((active, options))
    if let setActiveHandler = setActiveHandler {
      try setActiveHandler(active, options)
    }
  }
}

final class AcknowledgementsViewControllerDataSourceMock: AcknowledgementsViewControllerDataSource {
  init() {}
  init(acknowledgements: [Acknowledgement] = [Acknowledgement]()) {
    self.acknowledgements = acknowledgements
  }

  private(set) var acknowledgementsSetCallCount = 0
  var acknowledgements: [Acknowledgement] = .init() { didSet { acknowledgementsSetCallCount += 1 } }
}

final class ErrorViewControllerDelegateMock: ErrorViewControllerDelegate {
  init() {}

  private(set) var errorViewControllerDidTapAppStoreCallCount = 0
  var errorViewControllerDidTapAppStoreArgValues = [ErrorViewController]()
  var errorViewControllerDidTapAppStoreHandler: ((ErrorViewController) -> Void)?
  func errorViewControllerDidTapAppStore(_ errorViewController: ErrorViewController) {
    errorViewControllerDidTapAppStoreCallCount += 1
    errorViewControllerDidTapAppStoreArgValues.append(errorViewController)
    if let errorViewControllerDidTapAppStoreHandler = errorViewControllerDidTapAppStoreHandler {
      errorViewControllerDidTapAppStoreHandler(errorViewController)
    }
  }
}

final class EventViewControllerDelegateMock: EventViewControllerDelegate {
  init() {}

  private(set) var eventViewControllerDidTapVideoCallCount = 0
  var eventViewControllerDidTapVideoArgValues = [EventViewController]()
  var eventViewControllerDidTapVideoHandler: ((EventViewController) -> Void)?
  func eventViewControllerDidTapVideo(_ eventViewController: EventViewController) {
    eventViewControllerDidTapVideoCallCount += 1
    eventViewControllerDidTapVideoArgValues.append(eventViewController)
    if let eventViewControllerDidTapVideoHandler = eventViewControllerDidTapVideoHandler {
      eventViewControllerDidTapVideoHandler(eventViewController)
    }
  }

  private(set) var eventViewControllerDidTapLivestreamCallCount = 0
  var eventViewControllerDidTapLivestreamArgValues = [EventViewController]()
  var eventViewControllerDidTapLivestreamHandler: ((EventViewController) -> Void)?
  func eventViewControllerDidTapLivestream(_ eventViewController: EventViewController) {
    eventViewControllerDidTapLivestreamCallCount += 1
    eventViewControllerDidTapLivestreamArgValues.append(eventViewController)
    if let eventViewControllerDidTapLivestreamHandler = eventViewControllerDidTapLivestreamHandler {
      eventViewControllerDidTapLivestreamHandler(eventViewController)
    }
  }

  private(set) var eventViewControllerCallCount = 0
  var eventViewControllerArgValues = [(EventViewController, URL)]()
  var eventViewControllerHandler: ((EventViewController, URL) -> Void)?
  func eventViewController(_ eventViewController: EventViewController, didSelect url: URL) {
    eventViewControllerCallCount += 1
    eventViewControllerArgValues.append((eventViewController, url))
    if let eventViewControllerHandler = eventViewControllerHandler {
      eventViewControllerHandler(eventViewController, url)
    }
  }
}

final class EventsViewControllerDataSourceMock: EventsViewControllerDataSource {
  init() {}

  private(set) var eventsCallCount = 0
  var eventsArgValues = [EventsViewController]()
  var eventsHandler: ((EventsViewController) -> ([Event]))?
  func events(in eventsViewController: EventsViewController) -> [Event] {
    eventsCallCount += 1
    eventsArgValues.append(eventsViewController)
    if let eventsHandler = eventsHandler {
      return eventsHandler(eventsViewController)
    }
    return [Event]()
  }

  private(set) var eventsViewControllerCallCount = 0
  var eventsViewControllerArgValues = [(EventsViewController, Event)]()
  var eventsViewControllerHandler: ((EventsViewController, Event) -> (String?))?
  func eventsViewController(_ eventsViewController: EventsViewController, captionFor event: Event) -> String? {
    eventsViewControllerCallCount += 1
    eventsViewControllerArgValues.append((eventsViewController, event))
    if let eventsViewControllerHandler = eventsViewControllerHandler {
      return eventsViewControllerHandler(eventsViewController, event)
    }
    return nil
  }
}

final class MapContainerViewControllerDelegateMock: MapContainerViewControllerDelegate {
  init() {}

  private(set) var containerViewControllerCallCount = 0
  var containerViewControllerArgValues = [(MapContainerViewController, UIViewController)]()
  var containerViewControllerHandler: ((MapContainerViewController, UIViewController) -> (CGRect))?
  func containerViewController(_ containerViewController: MapContainerViewController, rectFor detailViewController: UIViewController) -> CGRect {
    containerViewControllerCallCount += 1
    containerViewControllerArgValues.append((containerViewController, detailViewController))
    if let containerViewControllerHandler = containerViewControllerHandler {
      return containerViewControllerHandler(containerViewController, detailViewController)
    }
    return .zero
  }

  private(set) var containerViewControllerScrollDirectionForCallCount = 0
  var containerViewControllerScrollDirectionForArgValues = [(MapContainerViewController, UIViewController)]()
  var containerViewControllerScrollDirectionForHandler: ((MapContainerViewController, UIViewController) -> (MapContainerViewController.ScrollDirection))?
  func containerViewController(_ containerViewController: MapContainerViewController, scrollDirectionFor detailViewController: UIViewController) -> MapContainerViewController.ScrollDirection {
    containerViewControllerScrollDirectionForCallCount += 1
    containerViewControllerScrollDirectionForArgValues.append((containerViewController, detailViewController))
    if let containerViewControllerScrollDirectionForHandler = containerViewControllerScrollDirectionForHandler {
      return containerViewControllerScrollDirectionForHandler(containerViewController, detailViewController)
    }
    fatalError("containerViewControllerScrollDirectionForHandler returns can't have a default value thus its handler must be set")
  }

  private(set) var containerViewControllerDidShowCallCount = 0
  var containerViewControllerDidShowArgValues = [(MapContainerViewController, UIViewController)]()
  var containerViewControllerDidShowHandler: ((MapContainerViewController, UIViewController) -> Void)?
  func containerViewController(_ containerViewController: MapContainerViewController, didShow detailViewController: UIViewController) {
    containerViewControllerDidShowCallCount += 1
    containerViewControllerDidShowArgValues.append((containerViewController, detailViewController))
    if let containerViewControllerDidShowHandler = containerViewControllerDidShowHandler {
      containerViewControllerDidShowHandler(containerViewController, detailViewController)
    }
  }

  private(set) var containerViewControllerDidHideCallCount = 0
  var containerViewControllerDidHideArgValues = [(MapContainerViewController, UIViewController)]()
  var containerViewControllerDidHideHandler: ((MapContainerViewController, UIViewController) -> Void)?
  func containerViewController(_ containerViewController: MapContainerViewController, didHide detailViewController: UIViewController) {
    containerViewControllerDidHideCallCount += 1
    containerViewControllerDidHideArgValues.append((containerViewController, detailViewController))
    if let containerViewControllerDidHideHandler = containerViewControllerDidHideHandler {
      containerViewControllerDidHideHandler(containerViewController, detailViewController)
    }
  }
}

final class MoreViewControllerDelegateMock: MoreViewControllerDelegate {
  init() {}

  private(set) var moreViewControllerCallCount = 0
  var moreViewControllerArgValues = [(MoreViewController, MoreItem)]()
  var moreViewControllerHandler: ((MoreViewController, MoreItem) -> Void)?
  func moreViewController(_ moreViewController: MoreViewController, didSelect item: MoreItem) {
    moreViewControllerCallCount += 1
    moreViewControllerArgValues.append((moreViewController, item))
    if let moreViewControllerHandler = moreViewControllerHandler {
      moreViewControllerHandler(moreViewController, item)
    }
  }
}

final class TracksViewControllerDataSourceMock: TracksViewControllerDataSource {
  init() {}

  private(set) var numberOfSectionsCallCount = 0
  var numberOfSectionsArgValues = [TracksViewController]()
  var numberOfSectionsHandler: ((TracksViewController) -> (Int))?
  func numberOfSections(in tracksViewController: TracksViewController) -> Int {
    numberOfSectionsCallCount += 1
    numberOfSectionsArgValues.append(tracksViewController)
    if let numberOfSectionsHandler = numberOfSectionsHandler {
      return numberOfSectionsHandler(tracksViewController)
    }
    return 0
  }

  private(set) var tracksViewControllerCallCount = 0
  var tracksViewControllerArgValues = [(TracksViewController, Int)]()
  var tracksViewControllerHandler: ((TracksViewController, Int) -> (Int))?
  func tracksViewController(_ tracksViewController: TracksViewController, numberOfTracksIn section: Int) -> Int {
    tracksViewControllerCallCount += 1
    tracksViewControllerArgValues.append((tracksViewController, section))
    if let tracksViewControllerHandler = tracksViewControllerHandler {
      return tracksViewControllerHandler(tracksViewController, section)
    }
    return 0
  }

  private(set) var tracksViewControllerTrackAtCallCount = 0
  var tracksViewControllerTrackAtArgValues = [(TracksViewController, IndexPath)]()
  var tracksViewControllerTrackAtHandler: ((TracksViewController, IndexPath) -> (Track))?
  func tracksViewController(_ tracksViewController: TracksViewController, trackAt indexPath: IndexPath) -> Track {
    tracksViewControllerTrackAtCallCount += 1
    tracksViewControllerTrackAtArgValues.append((tracksViewController, indexPath))
    if let tracksViewControllerTrackAtHandler = tracksViewControllerTrackAtHandler {
      return tracksViewControllerTrackAtHandler(tracksViewController, indexPath)
    }
    fatalError("tracksViewControllerTrackAtHandler returns can't have a default value thus its handler must be set")
  }
}

final class WelcomeViewControllerDelegateMock: WelcomeViewControllerDelegate {
  init() {}

  private(set) var welcomeViewControllerDidTapContinueCallCount = 0
  var welcomeViewControllerDidTapContinueArgValues = [WelcomeViewController]()
  var welcomeViewControllerDidTapContinueHandler: ((WelcomeViewController) -> Void)?
  func welcomeViewControllerDidTapContinue(_ welcomeViewController: WelcomeViewController) {
    welcomeViewControllerDidTapContinueCallCount += 1
    welcomeViewControllerDidTapContinueArgValues.append(welcomeViewController)
    if let welcomeViewControllerDidTapContinueHandler = welcomeViewControllerDidTapContinueHandler {
      welcomeViewControllerDidTapContinueHandler(welcomeViewController)
    }
  }
}

final class PreloadServiceFileMock: PreloadServiceFile {
  init() {}

  private(set) var fileExistsCallCount = 0
  var fileExistsArgValues = [String]()
  var fileExistsHandler: ((String) -> (Bool))?
  func fileExists(atPath path: String) -> Bool {
    fileExistsCallCount += 1
    fileExistsArgValues.append(path)
    if let fileExistsHandler = fileExistsHandler {
      return fileExistsHandler(path)
    }
    return false
  }

  private(set) var copyItemCallCount = 0
  var copyItemArgValues = [(String, String)]()
  var copyItemHandler: ((String, String) throws -> Void)?
  func copyItem(atPath srcPath: String, toPath dstPath: String) throws {
    copyItemCallCount += 1
    copyItemArgValues.append((srcPath, dstPath))
    if let copyItemHandler = copyItemHandler {
      try copyItemHandler(srcPath, dstPath)
    }
  }

  private(set) var urlCallCount = 0
  var urlArgValues = [(FileManager.SearchPathDirectory, FileManager.SearchPathDomainMask, URL?, Bool)]()
  var urlHandler: ((FileManager.SearchPathDirectory, FileManager.SearchPathDomainMask, URL?, Bool) throws -> (URL))?
  func url(for directory: FileManager.SearchPathDirectory, in domain: FileManager.SearchPathDomainMask, appropriateFor url: URL?, create shouldCreate: Bool) throws -> URL {
    urlCallCount += 1
    urlArgValues.append((directory, domain, url, shouldCreate))
    if let urlHandler = urlHandler {
      return try urlHandler(directory, domain, url, shouldCreate)
    }
    return URL(fileURLWithPath: "")
  }

  private(set) var removeItemCallCount = 0
  var removeItemArgValues = [String]()
  var removeItemHandler: ((String) throws -> Void)?
  func removeItem(atPath path: String) throws {
    removeItemCallCount += 1
    removeItemArgValues.append(path)
    if let removeItemHandler = removeItemHandler {
      try removeItemHandler(path)
    }
  }
}

final class MapViewControllerDelegateMock: MapViewControllerDelegate {
  init() {}

  private(set) var mapViewControllerCallCount = 0
  var mapViewControllerArgValues = [(MapViewController, Building)]()
  var mapViewControllerHandler: ((MapViewController, Building) -> Void)?
  func mapViewController(_ mapViewController: MapViewController, didSelect building: Building) {
    mapViewControllerCallCount += 1
    mapViewControllerArgValues.append((mapViewController, building))
    if let mapViewControllerHandler = mapViewControllerHandler {
      mapViewControllerHandler(mapViewController, building)
    }
  }

  private(set) var mapViewControllerDidDeselectBuildingCallCount = 0
  var mapViewControllerDidDeselectBuildingArgValues = [MapViewController]()
  var mapViewControllerDidDeselectBuildingHandler: ((MapViewController) -> Void)?
  func mapViewControllerDidDeselectBuilding(_ mapViewController: MapViewController) {
    mapViewControllerDidDeselectBuildingCallCount += 1
    mapViewControllerDidDeselectBuildingArgValues.append(mapViewController)
    if let mapViewControllerDidDeselectBuildingHandler = mapViewControllerDidDeselectBuildingHandler {
      mapViewControllerDidDeselectBuildingHandler(mapViewController)
    }
  }

  private(set) var mapViewControllerDidTapLocationCallCount = 0
  var mapViewControllerDidTapLocationArgValues = [MapViewController]()
  var mapViewControllerDidTapLocationHandler: ((MapViewController) -> Void)?
  func mapViewControllerDidTapLocation(_ mapViewController: MapViewController) {
    mapViewControllerDidTapLocationCallCount += 1
    mapViewControllerDidTapLocationArgValues.append(mapViewController)
    if let mapViewControllerDidTapLocationHandler = mapViewControllerDidTapLocationHandler {
      mapViewControllerDidTapLocationHandler(mapViewController)
    }
  }

  private(set) var mapViewControllerDidTapResetCallCount = 0
  var mapViewControllerDidTapResetArgValues = [MapViewController]()
  var mapViewControllerDidTapResetHandler: ((MapViewController) -> Void)?
  func mapViewControllerDidTapReset(_ mapViewController: MapViewController) {
    mapViewControllerDidTapResetCallCount += 1
    mapViewControllerDidTapResetArgValues.append(mapViewController)
    if let mapViewControllerDidTapResetHandler = mapViewControllerDidTapResetHandler {
      mapViewControllerDidTapResetHandler(mapViewController)
    }
  }
}

final class YearsViewControllerDataSourceMock: YearsViewControllerDataSource {
  init() {}

  private(set) var numberOfYearsCallCount = 0
  var numberOfYearsArgValues = [YearsViewController]()
  var numberOfYearsHandler: ((YearsViewController) -> (Int))?
  func numberOfYears(in yearsViewController: YearsViewController) -> Int {
    numberOfYearsCallCount += 1
    numberOfYearsArgValues.append(yearsViewController)
    if let numberOfYearsHandler = numberOfYearsHandler {
      return numberOfYearsHandler(yearsViewController)
    }
    return 0
  }

  private(set) var yearsViewControllerCallCount = 0
  var yearsViewControllerArgValues = [(YearsViewController, Int)]()
  var yearsViewControllerHandler: ((YearsViewController, Int) -> (Year))?
  func yearsViewController(_ yearsViewController: YearsViewController, yearAt index: Int) -> Year {
    yearsViewControllerCallCount += 1
    yearsViewControllerArgValues.append((yearsViewController, index))
    if let yearsViewControllerHandler = yearsViewControllerHandler {
      return yearsViewControllerHandler(yearsViewController, index)
    }
    fatalError("yearsViewControllerHandler returns can't have a default value thus its handler must be set")
  }

  private(set) var yearsViewControllerDownloadStateAtCallCount = 0
  var yearsViewControllerDownloadStateAtArgValues = [(YearsViewController, Int)]()
  var yearsViewControllerDownloadStateAtHandler: ((YearsViewController, Int) -> (YearDownloadState))?
  func yearsViewController(_ yearsViewController: YearsViewController, downloadStateAt index: Int) -> YearDownloadState {
    yearsViewControllerDownloadStateAtCallCount += 1
    yearsViewControllerDownloadStateAtArgValues.append((yearsViewController, index))
    if let yearsViewControllerDownloadStateAtHandler = yearsViewControllerDownloadStateAtHandler {
      return yearsViewControllerDownloadStateAtHandler(yearsViewController, index)
    }
    fatalError("yearsViewControllerDownloadStateAtHandler returns can't have a default value thus its handler must be set")
  }
}

final class AcknowledgementsViewControllerDelegateMock: AcknowledgementsViewControllerDelegate {
  init() {}

  private(set) var acknowledgementsViewControllerCallCount = 0
  var acknowledgementsViewControllerArgValues = [(AcknowledgementsViewController, Acknowledgement)]()
  var acknowledgementsViewControllerHandler: ((AcknowledgementsViewController, Acknowledgement) -> Void)?
  func acknowledgementsViewController(_ acknowledgementsViewController: AcknowledgementsViewController, didSelect acknowledgement: Acknowledgement) {
    acknowledgementsViewControllerCallCount += 1
    acknowledgementsViewControllerArgValues.append((acknowledgementsViewController, acknowledgement))
    if let acknowledgementsViewControllerHandler = acknowledgementsViewControllerHandler {
      acknowledgementsViewControllerHandler(acknowledgementsViewController, acknowledgement)
    }
  }
}

final class TransportationViewControllerDelegateMock: TransportationViewControllerDelegate {
  init() {}

  private(set) var transportationViewControllerCallCount = 0
  var transportationViewControllerArgValues = [(TransportationViewController, TransportationItem)]()
  var transportationViewControllerHandler: ((TransportationViewController, TransportationItem) -> Void)?
  func transportationViewController(_ transportationViewController: TransportationViewController, didSelect item: TransportationItem) {
    transportationViewControllerCallCount += 1
    transportationViewControllerArgValues.append((transportationViewController, item))
    if let transportationViewControllerHandler = transportationViewControllerHandler {
      transportationViewControllerHandler(transportationViewController, item)
    }
  }
}

final class EventsViewControllerLiveDataSourceMock: EventsViewControllerLiveDataSource {
  init() {}

  private(set) var eventsViewControllerCallCount = 0
  var eventsViewControllerArgValues = [(EventsViewController, Event)]()
  var eventsViewControllerHandler: ((EventsViewController, Event) -> (Bool))?
  func eventsViewController(_ eventsViewController: EventsViewController, shouldShowLiveIndicatorFor event: Event) -> Bool {
    eventsViewControllerCallCount += 1
    eventsViewControllerArgValues.append((eventsViewController, event))
    if let eventsViewControllerHandler = eventsViewControllerHandler {
      return eventsViewControllerHandler(eventsViewController, event)
    }
    return false
  }
}

final class OpenServiceProtocolMock: OpenServiceProtocol {
  init() {}

  private(set) var openCallCount = 0
  var openArgValues = [URL]()
  var openHandler: ((URL, ((Bool) -> Void)?) -> Void)?
  func open(_ url: URL, completion: ((Bool) -> Void)?) {
    openCallCount += 1
    openArgValues.append(url)
    if let openHandler = openHandler {
      openHandler(url, completion)
    }
  }
}

final class EventViewControllerDataSourceMock: EventViewControllerDataSource {
  init() {}

  private(set) var eventViewControllerCallCount = 0
  var eventViewControllerArgValues = [(EventViewController, Event)]()
  var eventViewControllerHandler: ((EventViewController, Event) -> (PlaybackPosition))?
  func eventViewController(_ eventViewController: EventViewController, playbackPositionFor event: Event) -> PlaybackPosition {
    eventViewControllerCallCount += 1
    eventViewControllerArgValues.append((eventViewController, event))
    if let eventViewControllerHandler = eventViewControllerHandler {
      return eventViewControllerHandler(eventViewController, event)
    }
    fatalError("eventViewControllerHandler returns can't have a default value thus its handler must be set")
  }
}

final class TracksViewControllerIndexDataSourceMock: TracksViewControllerIndexDataSource {
  init() {}

  private(set) var sectionIndexTitlesCallCount = 0
  var sectionIndexTitlesArgValues = [TracksViewController]()
  var sectionIndexTitlesHandler: ((TracksViewController) -> ([String]))?
  func sectionIndexTitles(in tracksViewController: TracksViewController) -> [String] {
    sectionIndexTitlesCallCount += 1
    sectionIndexTitlesArgValues.append(tracksViewController)
    if let sectionIndexTitlesHandler = sectionIndexTitlesHandler {
      return sectionIndexTitlesHandler(tracksViewController)
    }
    return [String]()
  }

  private(set) var tracksViewControllerCallCount = 0
  var tracksViewControllerArgValues = [(TracksViewController, Int)]()
  var tracksViewControllerHandler: ((TracksViewController, Int) -> (String?))?
  func tracksViewController(_ tracksViewController: TracksViewController, titleForSectionAt section: Int) -> String? {
    tracksViewControllerCallCount += 1
    tracksViewControllerArgValues.append((tracksViewController, section))
    if let tracksViewControllerHandler = tracksViewControllerHandler {
      return tracksViewControllerHandler(tracksViewController, section)
    }
    return nil
  }

  private(set) var tracksViewControllerAccessibilityIdentifierForSectionAtCallCount = 0
  var tracksViewControllerAccessibilityIdentifierForSectionAtArgValues = [(TracksViewController, Int)]()
  var tracksViewControllerAccessibilityIdentifierForSectionAtHandler: ((TracksViewController, Int) -> (String?))?
  func tracksViewController(_ tracksViewController: TracksViewController, accessibilityIdentifierForSectionAt section: Int) -> String? {
    tracksViewControllerAccessibilityIdentifierForSectionAtCallCount += 1
    tracksViewControllerAccessibilityIdentifierForSectionAtArgValues.append((tracksViewController, section))
    if let tracksViewControllerAccessibilityIdentifierForSectionAtHandler = tracksViewControllerAccessibilityIdentifierForSectionAtHandler {
      return tracksViewControllerAccessibilityIdentifierForSectionAtHandler(tracksViewController, section)
    }
    return nil
  }
}

final class PreloadServiceBundleMock: PreloadServiceBundle {
  init() {}

  private(set) var pathCallCount = 0
  var pathArgValues = [(String?, String?)]()
  var pathHandler: ((String?, String?) -> (String?))?
  func path(forResource name: String?, ofType ext: String?) -> String? {
    pathCallCount += 1
    pathArgValues.append((name, ext))
    if let pathHandler = pathHandler {
      return pathHandler(name, ext)
    }
    return nil
  }
}

final class EventsViewControllerFavoritesDataSourceMock: EventsViewControllerFavoritesDataSource {
  init() {}

  private(set) var eventsViewControllerCallCount = 0
  var eventsViewControllerArgValues = [(EventsViewController, Event)]()
  var eventsViewControllerHandler: ((EventsViewController, Event) -> (Bool))?
  func eventsViewController(_ eventsViewController: EventsViewController, canFavorite event: Event) -> Bool {
    eventsViewControllerCallCount += 1
    eventsViewControllerArgValues.append((eventsViewController, event))
    if let eventsViewControllerHandler = eventsViewControllerHandler {
      return eventsViewControllerHandler(eventsViewController, event)
    }
    return false
  }
}

final class YearsViewControllerDelegateMock: YearsViewControllerDelegate {
  init() {}

  private(set) var yearsViewControllerCallCount = 0
  var yearsViewControllerArgValues = [(YearsViewController, Int)]()
  var yearsViewControllerHandler: ((YearsViewController, Int) -> Void)?
  func yearsViewController(_ yearsViewController: YearsViewController, didSelectYearAt index: Int) {
    yearsViewControllerCallCount += 1
    yearsViewControllerArgValues.append((yearsViewController, index))
    if let yearsViewControllerHandler = yearsViewControllerHandler {
      yearsViewControllerHandler(yearsViewController, index)
    }
  }
}

final class OpenServiceApplicationMock: OpenServiceApplication {
  init() {}

  private(set) var openCallCount = 0
  var openArgValues = [(URL, [UIApplication.OpenExternalURLOptionsKey: Any])]()
  var openHandler: ((URL, [UIApplication.OpenExternalURLOptionsKey: Any], ((Bool) -> Void)?) -> Void)?
  func open(_ url: URL, options: [UIApplication.OpenExternalURLOptionsKey: Any], completionHandler completion: ((Bool) -> Void)?) {
    openCallCount += 1
    openArgValues.append((url, options))
    if let openHandler = openHandler {
      openHandler(url, options, completion)
    }
  }
}

final class BundleServiceBundleMock: BundleServiceBundle {
  init() {}

  private(set) var urlCallCount = 0
  var urlArgValues = [(String?, String?)]()
  var urlHandler: ((String?, String?) -> (URL?))?
  func url(forResource name: String?, withExtension ext: String?) -> URL? {
    urlCallCount += 1
    urlArgValues.append((name, ext))
    if let urlHandler = urlHandler {
      return urlHandler(name, ext)
    }
    return nil
  }
}

final class EventsViewControllerDelegateMock: EventsViewControllerDelegate {
  init() {}

  private(set) var eventsViewControllerCallCount = 0
  var eventsViewControllerArgValues = [(EventsViewController, Event)]()
  var eventsViewControllerHandler: ((EventsViewController, Event) -> Void)?
  func eventsViewController(_ eventsViewController: EventsViewController, didSelect event: Event) {
    eventsViewControllerCallCount += 1
    eventsViewControllerArgValues.append((eventsViewController, event))
    if let eventsViewControllerHandler = eventsViewControllerHandler {
      eventsViewControllerHandler(eventsViewController, event)
    }
  }
}

final class AcknowledgementsServiceProtocolMock: AcknowledgementsServiceProtocol {
  init() {}
  init(loadAcknowledgements: @escaping () throws -> [Acknowledgement]) {
    _loadAcknowledgements = loadAcknowledgements
  }

  private(set) var loadAcknowledgementsSetCallCount = 0
  private var _loadAcknowledgements: (() throws -> [Acknowledgement])! { didSet { loadAcknowledgementsSetCallCount += 1 } }
  var loadAcknowledgements: () throws -> [Acknowledgement] {
    get { _loadAcknowledgements }
    set { _loadAcknowledgements = newValue }
  }
}

final class TracksViewControllerFavoritesDataSourceMock: TracksViewControllerFavoritesDataSource {
  init() {}

  private(set) var tracksViewControllerCallCount = 0
  var tracksViewControllerArgValues = [(TracksViewController, Track)]()
  var tracksViewControllerHandler: ((TracksViewController, Track) -> (Bool))?
  func tracksViewController(_ tracksViewController: TracksViewController, canFavorite track: Track) -> Bool {
    tracksViewControllerCallCount += 1
    tracksViewControllerArgValues.append((tracksViewController, track))
    if let tracksViewControllerHandler = tracksViewControllerHandler {
      return tracksViewControllerHandler(tracksViewController, track)
    }
    return false
  }
}

final class BundleServiceDataProviderMock: BundleServiceDataProvider {
  init() {}

  private(set) var dataCallCount = 0
  var dataArgValues = [URL]()
  var dataHandler: ((URL) throws -> (Data))?
  func data(withContentsOf url: URL) throws -> Data {
    dataCallCount += 1
    dataArgValues.append(url)
    if let dataHandler = dataHandler {
      return try dataHandler(url)
    }
    fatalError("dataHandler returns can't have a default value thus its handler must be set")
  }
}

final class EventsViewControllerFavoritesDelegateMock: EventsViewControllerFavoritesDelegate {
  init() {}

  private(set) var eventsViewControllerCallCount = 0
  var eventsViewControllerArgValues = [(EventsViewController, Event)]()
  var eventsViewControllerHandler: ((EventsViewController, Event) -> Void)?
  func eventsViewController(_ eventsViewController: EventsViewController, didFavorite event: Event) {
    eventsViewControllerCallCount += 1
    eventsViewControllerArgValues.append((eventsViewController, event))
    if let eventsViewControllerHandler = eventsViewControllerHandler {
      eventsViewControllerHandler(eventsViewController, event)
    }
  }

  private(set) var eventsViewControllerDidUnfavoriteCallCount = 0
  var eventsViewControllerDidUnfavoriteArgValues = [(EventsViewController, Event)]()
  var eventsViewControllerDidUnfavoriteHandler: ((EventsViewController, Event) -> Void)?
  func eventsViewController(_ eventsViewController: EventsViewController, didUnfavorite event: Event) {
    eventsViewControllerDidUnfavoriteCallCount += 1
    eventsViewControllerDidUnfavoriteArgValues.append((eventsViewController, event))
    if let eventsViewControllerDidUnfavoriteHandler = eventsViewControllerDidUnfavoriteHandler {
      eventsViewControllerDidUnfavoriteHandler(eventsViewController, event)
    }
  }
}

final class AcknowledgementsServiceBundleMock: AcknowledgementsServiceBundle {
  init() {}

  private(set) var urlCallCount = 0
  var urlArgValues = [(String?, String?)]()
  var urlHandler: ((String?, String?) -> (URL?))?
  func url(forResource name: String?, withExtension ext: String?) -> URL? {
    urlCallCount += 1
    urlArgValues.append((name, ext))
    if let urlHandler = urlHandler {
      return urlHandler(name, ext)
    }
    return nil
  }
}

final class TracksViewControllerDelegateMock: TracksViewControllerDelegate {
  init() {}

  private(set) var tracksViewControllerCallCount = 0
  var tracksViewControllerArgValues = [(TracksViewController, Track)]()
  var tracksViewControllerHandler: ((TracksViewController, Track) -> Void)?
  func tracksViewController(_ tracksViewController: TracksViewController, didSelect track: Track) {
    tracksViewControllerCallCount += 1
    tracksViewControllerArgValues.append((tracksViewController, track))
    if let tracksViewControllerHandler = tracksViewControllerHandler {
      tracksViewControllerHandler(tracksViewController, track)
    }
  }
}

final class EventsViewControllerDeleteDelegateMock: EventsViewControllerDeleteDelegate {
  init() {}

  private(set) var eventsViewControllerCallCount = 0
  var eventsViewControllerArgValues = [(EventsViewController, Event)]()
  var eventsViewControllerHandler: ((EventsViewController, Event) -> Void)?
  func eventsViewController(_ eventsViewController: EventsViewController, didDelete event: Event) {
    eventsViewControllerCallCount += 1
    eventsViewControllerArgValues.append((eventsViewController, event))
    if let eventsViewControllerHandler = eventsViewControllerHandler {
      eventsViewControllerHandler(eventsViewController, event)
    }
  }
}

final class BuildingsServiceProtocolMock: BuildingsServiceProtocol {
  init() {}

  private(set) var loadBuildingsCallCount = 0
  var loadBuildingsHandler: ((@escaping ([Building], BuildingsService.Error?) -> Void) -> Void)?
  func loadBuildings(completion: @escaping ([Building], BuildingsService.Error?) -> Void) {
    loadBuildingsCallCount += 1
    if let loadBuildingsHandler = loadBuildingsHandler {
      loadBuildingsHandler(completion)
    }
  }
}

final class AcknowledgementsServiceDataProviderMock: AcknowledgementsServiceDataProvider {
  init() {}

  private(set) var dataCallCount = 0
  var dataArgValues = [URL]()
  var dataHandler: ((URL) throws -> (Data))?
  func data(withContentsOf url: URL) throws -> Data {
    dataCallCount += 1
    dataArgValues.append(url)
    if let dataHandler = dataHandler {
      return try dataHandler(url)
    }
    fatalError("dataHandler returns can't have a default value thus its handler must be set")
  }
}

final class TracksViewControllerIndexDelegateMock: TracksViewControllerIndexDelegate {
  init() {}

  private(set) var tracksViewControllerCallCount = 0
  var tracksViewControllerArgValues = [(TracksViewController, Int)]()
  var tracksViewControllerHandler: ((TracksViewController, Int) -> Void)?
  func tracksViewController(_ tracksViewController: TracksViewController, didSelect section: Int) {
    tracksViewControllerCallCount += 1
    tracksViewControllerArgValues.append((tracksViewController, section))
    if let tracksViewControllerHandler = tracksViewControllerHandler {
      tracksViewControllerHandler(tracksViewController, section)
    }
  }
}

final class UpdateServiceProtocolMock: UpdateServiceProtocol {
  init() {}

  private(set) var detectUpdatesCallCount = 0
  var detectUpdatesHandler: ((@escaping () -> Void) -> Void)?
  func detectUpdates(completion: @escaping () -> Void) {
    detectUpdatesCallCount += 1
    if let detectUpdatesHandler = detectUpdatesHandler {
      detectUpdatesHandler(completion)
    }
  }
}

final class TracksViewControllerFavoritesDelegateMock: TracksViewControllerFavoritesDelegate {
  init() {}

  private(set) var tracksViewControllerCallCount = 0
  var tracksViewControllerArgValues = [(TracksViewController, Track)]()
  var tracksViewControllerHandler: ((TracksViewController, Track) -> Void)?
  func tracksViewController(_ tracksViewController: TracksViewController, didFavorite track: Track) {
    tracksViewControllerCallCount += 1
    tracksViewControllerArgValues.append((tracksViewController, track))
    if let tracksViewControllerHandler = tracksViewControllerHandler {
      tracksViewControllerHandler(tracksViewController, track)
    }
  }

  private(set) var tracksViewControllerDidUnfavoriteCallCount = 0
  var tracksViewControllerDidUnfavoriteArgValues = [(TracksViewController, Track)]()
  var tracksViewControllerDidUnfavoriteHandler: ((TracksViewController, Track) -> Void)?
  func tracksViewController(_ tracksViewController: TracksViewController, didUnfavorite track: Track) {
    tracksViewControllerDidUnfavoriteCallCount += 1
    tracksViewControllerDidUnfavoriteArgValues.append((tracksViewController, track))
    if let tracksViewControllerDidUnfavoriteHandler = tracksViewControllerDidUnfavoriteHandler {
      tracksViewControllerDidUnfavoriteHandler(tracksViewController, track)
    }
  }
}

final class BuildingsServiceBundleMock: BuildingsServiceBundle {
  init() {}

  private(set) var dataCallCount = 0
  var dataArgValues = [(String?, String?)]()
  var dataHandler: ((String?, String?) throws -> (Data))?
  func data(forResource name: String?, withExtension ext: String?) throws -> Data {
    dataCallCount += 1
    dataArgValues.append((name, ext))
    if let dataHandler = dataHandler {
      return try dataHandler(name, ext)
    }
    fatalError("dataHandler returns can't have a default value thus its handler must be set")
  }
}

final class UpdateServiceBundleMock: UpdateServiceBundle {
  init() {}
  init(bundleIdentifier: String? = nil, bundleShortVersion: String? = nil) {
    self.bundleIdentifier = bundleIdentifier
    self.bundleShortVersion = bundleShortVersion
  }

  private(set) var bundleIdentifierSetCallCount = 0
  var bundleIdentifier: String? { didSet { bundleIdentifierSetCallCount += 1 } }

  private(set) var bundleShortVersionSetCallCount = 0
  var bundleShortVersion: String? { didSet { bundleShortVersionSetCallCount += 1 } }
}

final class UpdateServiceNetworkMock: UpdateServiceNetwork {
  init() {}

  private(set) var performCallCount = 0
  var performArgValues = [AppStoreSearchRequest]()
  var performHandler: ((AppStoreSearchRequest, @escaping (Result<AppStoreSearchResponse, Error>) -> Void) -> (NetworkServiceTask))?
  func perform(_ request: AppStoreSearchRequest, completion: @escaping (Result<AppStoreSearchResponse, Error>) -> Void) -> NetworkServiceTask {
    performCallCount += 1
    performArgValues.append(request)
    if let performHandler = performHandler {
      return performHandler(request, completion)
    }
    return NetworkServiceTaskMock()
  }
}

final class VideosServiceProtocolMock: VideosServiceProtocol {
  init() {}

  private(set) var loadVideosCallCount = 0
  var loadVideosHandler: ((@escaping (Result<VideosService.Videos, Error>) -> Void) -> Void)?
  func loadVideos(_ completion: @escaping (Result<VideosService.Videos, Error>) -> Void) {
    loadVideosCallCount += 1
    if let loadVideosHandler = loadVideosHandler {
      loadVideosHandler(completion)
    }
  }
}

final class TimeServiceProtocolMock: TimeServiceProtocol {
  init() {}

  #if DEBUG

  private(set) var nowSetCallCount = 0
  var now: Date = .init() { didSet { nowSetCallCount += 1 } }
  #endif

  private(set) var startMonitoringCallCount = 0
  var startMonitoringHandler: (() -> Void)?
  func startMonitoring() {
    startMonitoringCallCount += 1
    if let startMonitoringHandler = startMonitoringHandler {
      startMonitoringHandler()
    }
  }

  private(set) var stopMonitoringCallCount = 0
  var stopMonitoringHandler: (() -> Void)?
  func stopMonitoring() {
    stopMonitoringCallCount += 1
    if let stopMonitoringHandler = stopMonitoringHandler {
      stopMonitoringHandler()
    }
  }

  private(set) var addObserverCallCount = 0
  var addObserverHandler: ((@escaping () -> Void) -> (NSObjectProtocol))?
  func addObserver(_ handler: @escaping () -> Void) -> NSObjectProtocol {
    addObserverCallCount += 1
    if let addObserverHandler = addObserverHandler {
      return addObserverHandler(handler)
    }
    fatalError("addObserverHandler returns can't have a default value thus its handler must be set")
  }
}

final class PersistenceServiceProtocolMock: PersistenceServiceProtocol {
  init() {}

  private(set) var performWriteCallCount = 0
  var performWriteArgValues = [PersistenceServiceWrite]()
  var performWriteHandler: ((PersistenceServiceWrite, @escaping (Error?) -> Void) -> Void)?
  func performWrite(_ write: PersistenceServiceWrite, completion: @escaping (Error?) -> Void) {
    performWriteCallCount += 1
    performWriteArgValues.append(write)
    if let performWriteHandler = performWriteHandler {
      performWriteHandler(write, completion)
    }
  }

  private(set) var performWriteSyncCallCount = 0
  var performWriteSyncArgValues = [PersistenceServiceWrite]()
  var performWriteSyncHandler: ((PersistenceServiceWrite) throws -> Void)?
  func performWriteSync(_ write: PersistenceServiceWrite) throws {
    performWriteSyncCallCount += 1
    performWriteSyncArgValues.append(write)
    if let performWriteSyncHandler = performWriteSyncHandler {
      try performWriteSyncHandler(write)
    }
  }

  private(set) var performReadCallCount = 0
  var performReadArgValues = [Any]()
  var performReadHandler: ((Any, Any) -> Void)?
  func performRead<Read>(_ read: Read, completion: @escaping (Result<Read.Model, Error>) -> Void) where Read: PersistenceServiceRead {
    performReadCallCount += 1
    performReadArgValues.append(read)
    if let performReadHandler = performReadHandler {
      performReadHandler(read, completion)
    }
  }

  private(set) var performReadSyncCallCount = 0
  var performReadSyncArgValues = [Any]()
  var performReadSyncHandler: ((Any) throws -> (Any))?
  func performReadSync<Read>(_ read: Read) throws -> Read.Model where Read: PersistenceServiceRead {
    performReadSyncCallCount += 1
    performReadSyncArgValues.append(read)
    if let performReadSyncHandler = performReadSyncHandler {
      return try performReadSyncHandler(read) as! Read.Model
    }
    fatalError("performReadSyncHandler returns can't have a default value thus its handler must be set")
  }
}

final class NetworkServiceTaskMock: NetworkServiceTask {
  init() {}

  private(set) var cancelCallCount = 0
  var cancelHandler: (() -> Void)?
  func cancel() {
    cancelCallCount += 1
    if let cancelHandler = cancelHandler {
      cancelHandler()
    }
  }

  private(set) var resumeCallCount = 0
  var resumeHandler: (() -> Void)?
  func resume() {
    resumeCallCount += 1
    if let resumeHandler = resumeHandler {
      resumeHandler()
    }
  }
}

final class LaunchServiceProtocolMock: LaunchServiceProtocol {
  init() {}
  init(didLaunchAfterUpdate: Bool = false, didLaunchAfterInstall: Bool = false, didLaunchAfterFosdemYearChange: Bool = false) {
    self.didLaunchAfterUpdate = didLaunchAfterUpdate
    self.didLaunchAfterInstall = didLaunchAfterInstall
    self.didLaunchAfterFosdemYearChange = didLaunchAfterFosdemYearChange
  }

  private(set) var didLaunchAfterUpdateSetCallCount = 0
  var didLaunchAfterUpdate: Bool = false { didSet { didLaunchAfterUpdateSetCallCount += 1 } }

  private(set) var didLaunchAfterInstallSetCallCount = 0
  var didLaunchAfterInstall: Bool = false { didSet { didLaunchAfterInstallSetCallCount += 1 } }

  private(set) var didLaunchAfterFosdemYearChangeSetCallCount = 0
  var didLaunchAfterFosdemYearChange: Bool = false { didSet { didLaunchAfterFosdemYearChangeSetCallCount += 1 } }

  private(set) var detectStatusCallCount = 0
  var detectStatusHandler: (() throws -> Void)?
  func detectStatus() throws {
    detectStatusCallCount += 1
    if let detectStatusHandler = detectStatusHandler {
      try detectStatusHandler()
    }
  }

  #if DEBUG

  private(set) var markAsLaunchedCallCount = 0
  var markAsLaunchedHandler: (() -> Void)?
  func markAsLaunched() {
    markAsLaunchedCallCount += 1
    if let markAsLaunchedHandler = markAsLaunchedHandler {
      markAsLaunchedHandler()
    }
  }
  #endif
}

final class NetworkServiceSessionMock: NetworkServiceSession {
  init() {}

  private(set) var dataTaskCallCount = 0
  var dataTaskArgValues = [URLRequest]()
  var dataTaskHandler: ((URLRequest, @escaping (Data?, URLResponse?, Error?) -> Void) -> (NetworkServiceTask))?
  func dataTask(with request: URLRequest, completionHandler: @escaping (Data?, URLResponse?, Error?) -> Void) -> NetworkServiceTask {
    dataTaskCallCount += 1
    dataTaskArgValues.append(request)
    if let dataTaskHandler = dataTaskHandler {
      return dataTaskHandler(request, completionHandler)
    }
    return NetworkServiceTaskMock()
  }
}

final class TimeServiceTimerMock: TimeServiceTimer {
  init() {}

  private(set) var invalidateCallCount = 0
  var invalidateHandler: (() -> Void)?
  func invalidate() {
    invalidateCallCount += 1
    if let invalidateHandler = invalidateHandler {
      invalidateHandler()
    }
  }
}

final class TimeServiceProviderMock: TimeServiceProvider {
  init() {}

  private(set) var scheduledTimerCallCount = 0
  var scheduledTimerArgValues = [(TimeInterval, Bool)]()
  var scheduledTimerHandler: ((TimeInterval, Bool, @escaping (TimeServiceTimer) -> Void) -> (TimeServiceTimer))?
  func scheduledTimer(withTimeInterval interval: TimeInterval, repeats: Bool, block: @escaping (TimeServiceTimer) -> Void) -> TimeServiceTimer {
    scheduledTimerCallCount += 1
    scheduledTimerArgValues.append((interval, repeats))
    if let scheduledTimerHandler = scheduledTimerHandler {
      return scheduledTimerHandler(interval, repeats, block)
    }
    return TimeServiceTimerMock()
  }
}

final class ScheduleServiceProtocolMock: ScheduleServiceProtocol {
  init() {}

  private(set) var startUpdatingCallCount = 0
  var startUpdatingHandler: (() -> Void)?
  func startUpdating() {
    startUpdatingCallCount += 1
    if let startUpdatingHandler = startUpdatingHandler {
      startUpdatingHandler()
    }
  }

  private(set) var stopUpdatingCallCount = 0
  var stopUpdatingHandler: (() -> Void)?
  func stopUpdating() {
    stopUpdatingCallCount += 1
    if let stopUpdatingHandler = stopUpdatingHandler {
      stopUpdatingHandler()
    }
  }

  #if DEBUG

  private(set) var disableCallCount = 0
  var disableHandler: (() -> Void)?
  func disable() {
    disableCallCount += 1
    if let disableHandler = disableHandler {
      disableHandler()
    }
  }
  #endif
}

final class ScheduleServiceDefaultsMock: ScheduleServiceDefaults {
  init() {}

  private(set) var valueCallCount = 0
  var valueArgValues = [String]()
  var valueHandler: ((String) -> (Any?))?
  func value(forKey key: String) -> Any? {
    valueCallCount += 1
    valueArgValues.append(key)
    if let valueHandler = valueHandler {
      return valueHandler(key)
    }
    return nil
  }

  private(set) var setCallCount = 0
  var setArgValues = [(Any?, String)]()
  var setHandler: ((Any?, String) -> Void)?
  func set(_ value: Any?, forKey defaultName: String) {
    setCallCount += 1
    setArgValues.append((value, defaultName))
    if let setHandler = setHandler {
      setHandler(value, defaultName)
    }
  }
}

final class YearsServiceProtocolMock: YearsServiceProtocol {
  init() {}

  private(set) static var currentSetCallCount = 0
  private static var _current: Int = 0 { didSet { currentSetCallCount += 1 } }
  static var current: Int {
    get { _current }
    set { _current = newValue }
  }

  private(set) static var allSetCallCount = 0
  private static var _all: ClosedRange<Int>! { didSet { allSetCallCount += 1 } }
  static var all: ClosedRange<Int> {
    get { _all }
    set { _all = newValue }
  }

  private(set) var isYearDownloadedCallCount = 0
  var isYearDownloadedArgValues = [Int]()
  var isYearDownloadedHandler: ((Int) -> (Bool))?
  func isYearDownloaded(_ year: Int) -> Bool {
    isYearDownloadedCallCount += 1
    isYearDownloadedArgValues.append(year)
    if let isYearDownloadedHandler = isYearDownloadedHandler {
      return isYearDownloadedHandler(year)
    }
    return false
  }

  private(set) var downloadYearCallCount = 0
  var downloadYearArgValues = [Int]()
  var downloadYearHandler: ((Int, @escaping (Error?) -> Void) -> (NetworkServiceTask))?
  func downloadYear(_ year: Int, completion: @escaping (Error?) -> Void) -> NetworkServiceTask {
    downloadYearCallCount += 1
    downloadYearArgValues.append(year)
    if let downloadYearHandler = downloadYearHandler {
      return downloadYearHandler(year, completion)
    }
    return NetworkServiceTaskMock()
  }

  private(set) var makePersistenceServiceCallCount = 0
  var makePersistenceServiceArgValues = [Int]()
  var makePersistenceServiceHandler: ((Int) throws -> (PersistenceServiceProtocol))?
  func makePersistenceService(forYear year: Int) throws -> PersistenceServiceProtocol {
    makePersistenceServiceCallCount += 1
    makePersistenceServiceArgValues.append(year)
    if let makePersistenceServiceHandler = makePersistenceServiceHandler {
      return try makePersistenceServiceHandler(year)
    }
    return PersistenceServiceProtocolMock()
  }
}

final class ScheduleServiceNetworkMock: ScheduleServiceNetwork {
  init() {}

  private(set) var performCallCount = 0
  var performArgValues = [ScheduleRequest]()
  var performHandler: ((ScheduleRequest, @escaping (Result<Schedule, Error>) -> Void) -> (NetworkServiceTask))?
  func perform(_ request: ScheduleRequest, completion: @escaping (Result<Schedule, Error>) -> Void) -> NetworkServiceTask {
    performCallCount += 1
    performArgValues.append(request)
    if let performHandler = performHandler {
      return performHandler(request, completion)
    }
    return NetworkServiceTaskMock()
  }
}

final class ScheduleServicePersistenceMock: ScheduleServicePersistence {
  init() {}

  private(set) var performWriteCallCount = 0
  var performWriteArgValues = [PersistenceServiceWrite]()
  var performWriteHandler: ((PersistenceServiceWrite, @escaping (Error?) -> Void) -> Void)?
  func performWrite(_ write: PersistenceServiceWrite, completion: @escaping (Error?) -> Void) {
    performWriteCallCount += 1
    performWriteArgValues.append(write)
    if let performWriteHandler = performWriteHandler {
      performWriteHandler(write, completion)
    }
  }
}

final class InfoServiceProtocolMock: InfoServiceProtocol {
  init() {}

  private(set) var loadAttributedTextCallCount = 0
  var loadAttributedTextArgValues = [Info]()
  var loadAttributedTextHandler: ((Info, @escaping (Result<NSAttributedString, Error>) -> Void) -> Void)?
  func loadAttributedText(for info: Info, completion: @escaping (Result<NSAttributedString, Error>) -> Void) {
    loadAttributedTextCallCount += 1
    loadAttributedTextArgValues.append(info)
    if let loadAttributedTextHandler = loadAttributedTextHandler {
      loadAttributedTextHandler(info, completion)
    }
  }
}

final class YearsServiceNetworkMock: YearsServiceNetwork {
  init() {}

  private(set) var performCallCount = 0
  var performArgValues = [ScheduleRequest]()
  var performHandler: ((ScheduleRequest, @escaping (Result<Schedule, Error>) -> Void) -> (NetworkServiceTask))?
  func perform(_ request: ScheduleRequest, completion: @escaping (Result<Schedule, Error>) -> Void) -> NetworkServiceTask {
    performCallCount += 1
    performArgValues.append(request)
    if let performHandler = performHandler {
      return performHandler(request, completion)
    }
    return NetworkServiceTaskMock()
  }
}

final class InfoServiceBundleMock: InfoServiceBundle {
  init() {}

  private(set) var dataCallCount = 0
  var dataArgValues = [(String?, String?)]()
  var dataHandler: ((String?, String?) throws -> (Data))?
  func data(forResource name: String?, withExtension ext: String?) throws -> Data {
    dataCallCount += 1
    dataArgValues.append((name, ext))
    if let dataHandler = dataHandler {
      return try dataHandler(name, ext)
    }
    fatalError("dataHandler returns can't have a default value thus its handler must be set")
  }
}

final class YearsServicePersistenceBuilderMock: YearsServicePersistenceBuilder {
  init() {}

  private(set) var makePersistenceServiceCallCount = 0
  var makePersistenceServiceArgValues = [String]()
  var makePersistenceServiceHandler: ((String) throws -> (PersistenceServiceProtocol))?
  func makePersistenceService(withPath path: String) throws -> PersistenceServiceProtocol {
    makePersistenceServiceCallCount += 1
    makePersistenceServiceArgValues.append(path)
    if let makePersistenceServiceHandler = makePersistenceServiceHandler {
      return try makePersistenceServiceHandler(path)
    }
    return PersistenceServiceProtocolMock()
  }
}

final class PlaybackServiceProtocolMock: PlaybackServiceProtocol {
  init() {}
  init(watching: Set<Int> = Set<Int>(), watched: Set<Int> = Set<Int>()) {
    self.watching = watching
    self.watched = watched
  }

  private(set) var watchingSetCallCount = 0
  var watching: Set<Int> = .init() { didSet { watchingSetCallCount += 1 } }

  private(set) var watchedSetCallCount = 0
  var watched: Set<Int> = .init() { didSet { watchedSetCallCount += 1 } }

  private(set) var setPlaybackPositionCallCount = 0
  var setPlaybackPositionArgValues = [(PlaybackPosition, Int)]()
  var setPlaybackPositionHandler: ((PlaybackPosition, Int) -> Void)?
  func setPlaybackPosition(_ position: PlaybackPosition, forEventWithIdentifier identifier: Int) {
    setPlaybackPositionCallCount += 1
    setPlaybackPositionArgValues.append((position, identifier))
    if let setPlaybackPositionHandler = setPlaybackPositionHandler {
      setPlaybackPositionHandler(position, identifier)
    }
  }

  private(set) var playbackPositionCallCount = 0
  var playbackPositionArgValues = [Int]()
  var playbackPositionHandler: ((Int) -> (PlaybackPosition))?
  func playbackPosition(forEventWithIdentifier identifier: Int) -> PlaybackPosition {
    playbackPositionCallCount += 1
    playbackPositionArgValues.append(identifier)
    if let playbackPositionHandler = playbackPositionHandler {
      return playbackPositionHandler(identifier)
    }
    fatalError("playbackPositionHandler returns can't have a default value thus its handler must be set")
  }

  private(set) var addObserverCallCount = 0
  var addObserverHandler: ((@escaping () -> Void) -> (NSObjectProtocol))?
  func addObserver(_ handler: @escaping () -> Void) -> NSObjectProtocol {
    addObserverCallCount += 1
    if let addObserverHandler = addObserverHandler {
      return addObserverHandler(handler)
    }
    fatalError("addObserverHandler returns can't have a default value thus its handler must be set")
  }

  private(set) var removeObserverCallCount = 0
  var removeObserverArgValues = [NSObjectProtocol]()
  var removeObserverHandler: ((NSObjectProtocol) -> Void)?
  func removeObserver(_ observer: NSObjectProtocol) {
    removeObserverCallCount += 1
    removeObserverArgValues.append(observer)
    if let removeObserverHandler = removeObserverHandler {
      removeObserverHandler(observer)
    }
  }
}

final class YearsServiceFileMock: YearsServiceFile {
  init() {}

  private(set) var createFileCallCount = 0
  var createFileArgValues = [(String, Data?, [FileAttributeKey: Any]?)]()
  var createFileHandler: ((String, Data?, [FileAttributeKey: Any]?) -> (Bool))?
  func createFile(atPath path: String, contents data: Data?, attributes attr: [FileAttributeKey: Any]?) -> Bool {
    createFileCallCount += 1
    createFileArgValues.append((path, data, attr))
    if let createFileHandler = createFileHandler {
      return createFileHandler(path, data, attr)
    }
    return false
  }

  private(set) var createDirectoryCallCount = 0
  var createDirectoryArgValues = [(URL, Bool, [FileAttributeKey: Any]?)]()
  var createDirectoryHandler: ((URL, Bool, [FileAttributeKey: Any]?) throws -> Void)?
  func createDirectory(at url: URL, withIntermediateDirectories createIntermediates: Bool, attributes: [FileAttributeKey: Any]?) throws {
    createDirectoryCallCount += 1
    createDirectoryArgValues.append((url, createIntermediates, attributes))
    if let createDirectoryHandler = createDirectoryHandler {
      try createDirectoryHandler(url, createIntermediates, attributes)
    }
  }

  private(set) var urlsCallCount = 0
  var urlsArgValues = [(FileManager.SearchPathDirectory, FileManager.SearchPathDomainMask)]()
  var urlsHandler: ((FileManager.SearchPathDirectory, FileManager.SearchPathDomainMask) -> ([URL]))?
  func urls(for directory: FileManager.SearchPathDirectory, in domainMask: FileManager.SearchPathDomainMask) -> [URL] {
    urlsCallCount += 1
    urlsArgValues.append((directory, domainMask))
    if let urlsHandler = urlsHandler {
      return urlsHandler(directory, domainMask)
    }
    return [URL]()
  }

  private(set) var fileExistsCallCount = 0
  var fileExistsArgValues = [String]()
  var fileExistsHandler: ((String) -> (Bool))?
  func fileExists(atPath path: String) -> Bool {
    fileExistsCallCount += 1
    fileExistsArgValues.append(path)
    if let fileExistsHandler = fileExistsHandler {
      return fileExistsHandler(path)
    }
    return false
  }
}

final class PlaybackServiceDefaultsMock: PlaybackServiceDefaults {
  init() {}

  private(set) var valueCallCount = 0
  var valueArgValues = [String]()
  var valueHandler: ((String) -> (Any?))?
  func value(forKey key: String) -> Any? {
    valueCallCount += 1
    valueArgValues.append(key)
    if let valueHandler = valueHandler {
      return valueHandler(key)
    }
    return nil
  }

  private(set) var setCallCount = 0
  var setArgValues = [(Any?, String)]()
  var setHandler: ((Any?, String) -> Void)?
  func set(_ value: Any?, forKey defaultName: String) {
    setCallCount += 1
    setArgValues.append((value, defaultName))
    if let setHandler = setHandler {
      setHandler(value, defaultName)
    }
  }
}

final class TracksServiceProtocolMock: TracksServiceProtocol {
  init() {}
  init(delegate: TracksServiceDelegate? = nil, tracks: [Track] = [Track](), filters: [TracksFilter] = [TracksFilter](), filteredTracks: [TracksFilter: [Track]] = [TracksFilter: [Track]](), filteredFavoriteTracks: [TracksFilter: [Track]] = [TracksFilter: [Track]](), filteredIndexTitles: [TracksFilter: [String: Int]] = [TracksFilter: [String: Int]]()) {
    self.delegate = delegate
    self.tracks = tracks
    self.filters = filters
    self.filteredTracks = filteredTracks
    self.filteredFavoriteTracks = filteredFavoriteTracks
    self.filteredIndexTitles = filteredIndexTitles
  }

  private(set) var delegateSetCallCount = 0
  var delegate: TracksServiceDelegate? { didSet { delegateSetCallCount += 1 } }

  private(set) var tracksSetCallCount = 0
  var tracks: [Track] = .init() { didSet { tracksSetCallCount += 1 } }

  private(set) var filtersSetCallCount = 0
  var filters: [TracksFilter] = .init() { didSet { filtersSetCallCount += 1 } }

  private(set) var filteredTracksSetCallCount = 0
  var filteredTracks: [TracksFilter: [Track]] = .init() { didSet { filteredTracksSetCallCount += 1 } }

  private(set) var filteredFavoriteTracksSetCallCount = 0
  var filteredFavoriteTracks: [TracksFilter: [Track]] = .init() { didSet { filteredFavoriteTracksSetCallCount += 1 } }

  private(set) var filteredIndexTitlesSetCallCount = 0
  var filteredIndexTitles: [TracksFilter: [String: Int]] = .init() { didSet { filteredIndexTitlesSetCallCount += 1 } }

  private(set) var loadTracksCallCount = 0
  var loadTracksHandler: (() -> Void)?
  func loadTracks() {
    loadTracksCallCount += 1
    if let loadTracksHandler = loadTracksHandler {
      loadTracksHandler()
    }
  }
}

final class FavoritesServiceProtocolMock: FavoritesServiceProtocol {
  init() {}
  init(tracksIdentifiers: Set<String> = Set<String>(), eventsIdentifiers: Set<Int> = Set<Int>()) {
    self.tracksIdentifiers = tracksIdentifiers
    self.eventsIdentifiers = eventsIdentifiers
  }

  private(set) var tracksIdentifiersSetCallCount = 0
  var tracksIdentifiers: Set<String> = .init() { didSet { tracksIdentifiersSetCallCount += 1 } }

  private(set) var eventsIdentifiersSetCallCount = 0
  var eventsIdentifiers: Set<Int> = .init() { didSet { eventsIdentifiersSetCallCount += 1 } }

  private(set) var addObserverForTracksCallCount = 0
  var addObserverForTracksHandler: ((@escaping (String) -> Void) -> (NSObjectProtocol))?
  func addObserverForTracks(_ handler: @escaping (String) -> Void) -> NSObjectProtocol {
    addObserverForTracksCallCount += 1
    if let addObserverForTracksHandler = addObserverForTracksHandler {
      return addObserverForTracksHandler(handler)
    }
    fatalError("addObserverForTracksHandler returns can't have a default value thus its handler must be set")
  }

  private(set) var addObserverForEventsCallCount = 0
  var addObserverForEventsHandler: ((@escaping (Int) -> Void) -> (NSObjectProtocol))?
  func addObserverForEvents(_ handler: @escaping (Int) -> Void) -> NSObjectProtocol {
    addObserverForEventsCallCount += 1
    if let addObserverForEventsHandler = addObserverForEventsHandler {
      return addObserverForEventsHandler(handler)
    }
    fatalError("addObserverForEventsHandler returns can't have a default value thus its handler must be set")
  }

  private(set) var removeObserverCallCount = 0
  var removeObserverArgValues = [NSObjectProtocol]()
  var removeObserverHandler: ((NSObjectProtocol) -> Void)?
  func removeObserver(_ observer: NSObjectProtocol) {
    removeObserverCallCount += 1
    removeObserverArgValues.append(observer)
    if let removeObserverHandler = removeObserverHandler {
      removeObserverHandler(observer)
    }
  }

  private(set) var addTrackCallCount = 0
  var addTrackArgValues = [String]()
  var addTrackHandler: ((String) -> Void)?
  func addTrack(withIdentifier identifier: String) {
    addTrackCallCount += 1
    addTrackArgValues.append(identifier)
    if let addTrackHandler = addTrackHandler {
      addTrackHandler(identifier)
    }
  }

  private(set) var removeTrackCallCount = 0
  var removeTrackArgValues = [String]()
  var removeTrackHandler: ((String) -> Void)?
  func removeTrack(withIdentifier identifier: String) {
    removeTrackCallCount += 1
    removeTrackArgValues.append(identifier)
    if let removeTrackHandler = removeTrackHandler {
      removeTrackHandler(identifier)
    }
  }

  private(set) var containsCallCount = 0
  var containsArgValues = [Track]()
  var containsHandler: ((Track) -> (Bool))?
  func contains(_ track: Track) -> Bool {
    containsCallCount += 1
    containsArgValues.append(track)
    if let containsHandler = containsHandler {
      return containsHandler(track)
    }
    return false
  }

  private(set) var addEventCallCount = 0
  var addEventArgValues = [Int]()
  var addEventHandler: ((Int) -> Void)?
  func addEvent(withIdentifier identifier: Int) {
    addEventCallCount += 1
    addEventArgValues.append(identifier)
    if let addEventHandler = addEventHandler {
      addEventHandler(identifier)
    }
  }

  private(set) var removeEventCallCount = 0
  var removeEventArgValues = [Int]()
  var removeEventHandler: ((Int) -> Void)?
  func removeEvent(withIdentifier identifier: Int) {
    removeEventCallCount += 1
    removeEventArgValues.append(identifier)
    if let removeEventHandler = removeEventHandler {
      removeEventHandler(identifier)
    }
  }

  private(set) var containsEventCallCount = 0
  var containsEventArgValues = [Event]()
  var containsEventHandler: ((Event) -> (Bool))?
  func contains(_ event: Event) -> Bool {
    containsEventCallCount += 1
    containsEventArgValues.append(event)
    if let containsEventHandler = containsEventHandler {
      return containsEventHandler(event)
    }
    return false
  }

  private(set) var removeAllTracksAndEventsCallCount = 0
  var removeAllTracksAndEventsHandler: (() -> Void)?
  func removeAllTracksAndEvents() {
    removeAllTracksAndEventsCallCount += 1
    if let removeAllTracksAndEventsHandler = removeAllTracksAndEventsHandler {
      removeAllTracksAndEventsHandler()
    }
  }
}

final class NavigationServiceProtocolMock: NavigationServiceProtocol {
  init() {}

  private(set) var makeSearchViewControllerCallCount = 0
  var makeSearchViewControllerHandler: (() -> (UIViewController))?
  func makeSearchViewController() -> UIViewController {
    makeSearchViewControllerCallCount += 1
    if let makeSearchViewControllerHandler = makeSearchViewControllerHandler {
      return makeSearchViewControllerHandler()
    }
    return UIViewController()
  }

  private(set) var makeAgendaViewControllerCallCount = 0
  var makeAgendaViewControllerHandler: ((@escaping NavigationService.ErrorHandler) -> (UIViewController))?
  func makeAgendaViewController(didError: @escaping NavigationService.ErrorHandler) -> UIViewController {
    makeAgendaViewControllerCallCount += 1
    if let makeAgendaViewControllerHandler = makeAgendaViewControllerHandler {
      return makeAgendaViewControllerHandler(didError)
    }
    return UIViewController()
  }

  private(set) var makeMapViewControllerCallCount = 0
  var makeMapViewControllerHandler: ((@escaping NavigationService.ErrorHandler) -> (UIViewController))?
  func makeMapViewController(didError: @escaping NavigationService.ErrorHandler) -> UIViewController {
    makeMapViewControllerCallCount += 1
    if let makeMapViewControllerHandler = makeMapViewControllerHandler {
      return makeMapViewControllerHandler(didError)
    }
    return UIViewController()
  }

  private(set) var makeMoreViewControllerCallCount = 0
  var makeMoreViewControllerHandler: (() -> (UIViewController))?
  func makeMoreViewController() -> UIViewController {
    makeMoreViewControllerCallCount += 1
    if let makeMoreViewControllerHandler = makeMoreViewControllerHandler {
      return makeMoreViewControllerHandler()
    }
    return UIViewController()
  }

  private(set) var makeEventViewControllerCallCount = 0
  var makeEventViewControllerArgValues = [Event]()
  var makeEventViewControllerHandler: ((Event) -> (UIViewController))?
  func makeEventViewController(for event: Event) -> UIViewController {
    makeEventViewControllerCallCount += 1
    makeEventViewControllerArgValues.append(event)
    if let makeEventViewControllerHandler = makeEventViewControllerHandler {
      return makeEventViewControllerHandler(event)
    }
    return UIViewController()
  }

  private(set) var makePastEventViewControllerCallCount = 0
  var makePastEventViewControllerArgValues = [Event]()
  var makePastEventViewControllerHandler: ((Event) -> (UIViewController))?
  func makePastEventViewController(for event: Event) -> UIViewController {
    makePastEventViewControllerCallCount += 1
    makePastEventViewControllerArgValues.append(event)
    if let makePastEventViewControllerHandler = makePastEventViewControllerHandler {
      return makePastEventViewControllerHandler(event)
    }
    return UIViewController()
  }

  private(set) var makeTransportationViewControllerCallCount = 0
  var makeTransportationViewControllerHandler: (() -> (UIViewController))?
  func makeTransportationViewController() -> UIViewController {
    makeTransportationViewControllerCallCount += 1
    if let makeTransportationViewControllerHandler = makeTransportationViewControllerHandler {
      return makeTransportationViewControllerHandler()
    }
    return UIViewController()
  }

  private(set) var makeVideosViewControllerCallCount = 0
  var makeVideosViewControllerHandler: ((@escaping NavigationService.ErrorHandler) -> (UIViewController))?
  func makeVideosViewController(didError: @escaping NavigationService.ErrorHandler) -> UIViewController {
    makeVideosViewControllerCallCount += 1
    if let makeVideosViewControllerHandler = makeVideosViewControllerHandler {
      return makeVideosViewControllerHandler(didError)
    }
    return UIViewController()
  }

  private(set) var makeInfoViewControllerCallCount = 0
  var makeInfoViewControllerArgValues = [(String, Info)]()
  var makeInfoViewControllerHandler: ((String, Info, @escaping NavigationService.ErrorHandler) -> (UIViewController))?
  func makeInfoViewController(withTitle title: String, info: Info, didError: @escaping NavigationService.ErrorHandler) -> UIViewController {
    makeInfoViewControllerCallCount += 1
    makeInfoViewControllerArgValues.append((title, info))
    if let makeInfoViewControllerHandler = makeInfoViewControllerHandler {
      return makeInfoViewControllerHandler(title, info, didError)
    }
    return UIViewController()
  }

  private(set) var makeYearsViewControllerCallCount = 0
  var makeYearsViewControllerArgValues = [UITableView.Style]()
  var makeYearsViewControllerHandler: ((UITableView.Style, @escaping NavigationService.ErrorHandler) -> (UIViewController))?
  func makeYearsViewController(withStyle style: UITableView.Style, didError: @escaping NavigationService.ErrorHandler) -> UIViewController {
    makeYearsViewControllerCallCount += 1
    makeYearsViewControllerArgValues.append(style)
    if let makeYearsViewControllerHandler = makeYearsViewControllerHandler {
      return makeYearsViewControllerHandler(style, didError)
    }
    return UIViewController()
  }

  private(set) var makeYearsViewControllerForYearCallCount = 0
  var makeYearsViewControllerForYearArgValues = [(Int, PersistenceServiceProtocol)]()
  var makeYearsViewControllerForYearHandler: ((Int, PersistenceServiceProtocol, @escaping NavigationService.ErrorHandler) -> (UIViewController))?
  func makeYearsViewController(forYear year: Int, with persistenceService: PersistenceServiceProtocol, didError: @escaping NavigationService.ErrorHandler) -> UIViewController {
    makeYearsViewControllerForYearCallCount += 1
    makeYearsViewControllerForYearArgValues.append((year, persistenceService))
    if let makeYearsViewControllerForYearHandler = makeYearsViewControllerForYearHandler {
      return makeYearsViewControllerForYearHandler(year, persistenceService, didError)
    }
    return UIViewController()
  }

  private(set) var makePlayerViewControllerCallCount = 0
  var makePlayerViewControllerHandler: (() -> (NavigationService.PlayerViewController))?
  func makePlayerViewController() -> NavigationService.PlayerViewController {
    makePlayerViewControllerCallCount += 1
    if let makePlayerViewControllerHandler = makePlayerViewControllerHandler {
      return makePlayerViewControllerHandler()
    }
    fatalError("makePlayerViewControllerHandler returns can't have a default value thus its handler must be set")
  }

  private(set) var makeSafariViewControllerCallCount = 0
  var makeSafariViewControllerArgValues = [URL]()
  var makeSafariViewControllerHandler: ((URL) -> (UIViewController))?
  func makeSafariViewController(with url: URL) -> UIViewController {
    makeSafariViewControllerCallCount += 1
    makeSafariViewControllerArgValues.append(url)
    if let makeSafariViewControllerHandler = makeSafariViewControllerHandler {
      return makeSafariViewControllerHandler(url)
    }
    return UIViewController()
  }
}

final class FavoritesServiceDefaultsMock: FavoritesServiceDefaults {
  init() {}

  private(set) var valueCallCount = 0
  var valueArgValues = [String]()
  var valueHandler: ((String) -> (Any?))?
  func value(forKey key: String) -> Any? {
    valueCallCount += 1
    valueArgValues.append(key)
    if let valueHandler = valueHandler {
      return valueHandler(key)
    }
    return nil
  }

  private(set) var setCallCount = 0
  var setArgValues = [(Any?, String)]()
  var setHandler: ((Any?, String) -> Void)?
  func set(_ value: Any?, forKey defaultName: String) {
    setCallCount += 1
    setArgValues.append((value, defaultName))
    if let setHandler = setHandler {
      setHandler(value, defaultName)
    }
  }
}
